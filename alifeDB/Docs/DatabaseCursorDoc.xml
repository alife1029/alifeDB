<?xml version="1.0" encoding="utf-8" ?>
<docs>
  <DatabaseCursor>
    <summary>
      Veritabanının içerisinde gezinip kaydetme, güncelleme, silme gibi işlemlerin yapılmasını sağlar.
    </summary>
  </DatabaseCursor>

  <sync>
    <Connect>
      <summary>
        Belirtilen yoldaki veritabanı dosyasıyla bağlantı kurar. Eğer belirtilen yolda
        veritabanı dosyası mevcut değilse yeni bir veritabanı dosyası oluşturur.
      </summary>
      <param name="databasePath">Veritabanı dosyasının dosya sistemindeki konumu.</param>
      <param name="databaseName">Veritabanı adı.</param>
    </Connect>
    <GoToTable>
      <summary>
        İmlecin veritabanı içerisindeki bir tabloya gitmesini sağlar.
      </summary>
      <exception cref="TableDidNotFoundException"></exception>
      <param name="tableName">İmlecin hareket edeceği tablonun adı</param>
    </GoToTable>
    <CreateTable>
      <summary>
        Veritabanına yeni tablo ekler
      </summary>
      <param name="tableName">Veritabanına elenecek olan tablonun adı</param>
      <param name="columns">
        Tablonun içerisinde bulunacak olan sütunlar. <strong>İlk eleman birincil anahtardır!</strong>
      </param>
      <exception cref="TableAlreadyExistsException"></exception>
    </CreateTable>
    <CreateTableIfNotExists>
      <summary>
        Veritabanına yeni tablo ekler. Eğer aynı adda bir tablo zaten mevcutsa herhangi bir değişiklik yapmaz.
      </summary>
      <param name="tableName">Veritabanına elenecek olan tablonun adı</param>
      <param name="columns">
        Tablonun içerisinde bulunacak olan sütunlar. <strong>İlk eleman birincil anahtardır!</strong>
      </param>
    </CreateTableIfNotExists>
    <GetTable>
      <summary>
        Parametrede girilen isme sahip tabloyu <c>Table</c> türünden bir nesne olarak döndürür.
      </summary>
      <param name="tableName">Tablo adı</param>
      <returns>Girilen isme sahip tablo</returns>
    </GetTable>
    <GetTables>
      <summary>
        Veritabanında bulunan tüm tabloları bir <c>Table</c> listesi olark döndürür.
      </summary>
      <returns>Veritabanındaki tüm tablolar</returns>
    </GetTables>
    <AddRecord>
      <summary>
        İmlecin içerisinde bulunduğu tabloya kayıt eklemesini sağlar.
      </summary>
      <param name="columns">Kayıt içerisindeki sütunlar</param>
      <param name="values">Kayıt içerisindeki değerler</param>
      <exception cref="TableDidNotSetException"></exception>
    </AddRecord>
    <DeleteRecordByIndex>
      <summary>
        Kaydın tablodaki indeksine göre kaydı siler.
      </summary>
      <param name="index">Silinecek kaydın indeksi.</param>
      <exception cref="TableDidNotSetException"></exception>
      <exception cref="RecordDidNotFoundException"></exception>
    </DeleteRecordByIndex>
    <DeleteRecordByCondition>
      <summary>
        Parametreye girilen şartları sağlayan kayıtları siler.
      </summary>
      <param name="columns">Şart sütunları</param>
      <param name="values">Şartın sağlanması için istenen değerler</param>
      <exception cref="RecordDidNotFoundException"></exception>
      <exception cref="TableDidNotSetException"></exception>
    </DeleteRecordByCondition>
    <FetchRecordByIndex>
      <summary>
        Belli bir indeksteki kaydı <c>object</c> dizisi olarak veritabanından çeker.
      </summary>
      <param name="id"></param>
      <returns>
        Parametrede girilen indeksdeki kaydın <strong>sırasıyla</strong> tüm sütunlarında bulunan veri.
        <code>
          <strong>n = Sütun Sayısı</strong><br/>
          object[] { data_1, data_2, data_3, ... , data_n }
        </code>
      </returns>
    </FetchRecordByIndex>
    <FetchDataByIndex>
      <summary>
        Parametreye girilen indeksdeki kaydın parametreye girilen sütunlardaki değerlerini <strong>sırasıyla</strong>
        bir <c>object</c> dizisi olarak döndürür.
      </summary>
      <param name="index">Kayıt indeksi</param>
      <param name="columns">Kayıttan değeri alınacak sütunlar</param>
      <exception cref="TableDidNotSetException"></exception>
      <exception cref="ColumnDidNotFoundException"></exception>
    </FetchDataByIndex>
    <Commit>
      <summary>
        Veritabanını kaydeder
      </summary>
    </Commit>
  </sync>
  
  <async>
    <ConnectAsync>
      <summary>
        Belirtilen yoldaki veritabanı dosyasıyla asenkron bir şekilde bağlantı kurar. Eğer belirtilen yolda
        veritabanı dosyası mevcut değilse yeni bir veritabanı dosyası oluşturur. <br/>
        <c>Connect(string, string)</c> metodundan farkı: Eğer veritabanı dosyası mevcutsa veritabanını
        okuma işlemini, arkasından gelen kodu bloklamadan asenkron bir şekilde yapar.
      </summary>
      <param name="databasePath">Veritabanı dosyasının dosya sistemindeki konumu.</param>
      <param name="databaseName">Veritabanı adı.</param>
    </ConnectAsync>
    <DeleteRecordByCondition>
      <summary>
        Parametreye girilen şartları sağlayan kayıtları asenkron olarak siler.<br/><br/>
        <strong><c>DeleteRecord(string[] columns, object[] values)</c> metodundan farkı:</strong><br/> 
        <c>DeleteRecord</c> metodu, arkasından gelen işlemleri bloklarken, bu metod arkasından gelen işlemleri bloklamaz.
      </summary>
      <param name="columns">Şart sütunları</param>
      <param name="values">Şartın sağlanması için istenen değerler</param>
      <exception cref="RecordDidNotFoundException"></exception>
      <exception cref="TableDidNotSetException"></exception>
    </DeleteRecordByCondition>
    <CommitAsync>
      <summary>
        Veritabanını asenkron bir şekilde kaydeder.<br/>
        <c>Commit()</c> metodundan farkı: <c>Commit()</c> metodu arkasından gelen işlemleri bloklarken 
        <c>CommitAsync()</c> metodu arkasından gelen işlemleri bloklamaz.
      </summary>
    </CommitAsync>
  </async>
</docs>